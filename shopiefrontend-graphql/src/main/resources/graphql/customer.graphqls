# A customer represents a customer account in shopie platform. Customer accounts store
# contact information for the customer, saving logged-in customers the trouble of
# having to provide it at every checkout.
type Customer implements Node{
  # A unique identifier for the customer.
  id: ID!

  # Indicates whether the customer has consented to be sent marketing material via email.
  acceptsMarketing: Boolean!

  # A list of addresses for the customer.
  addresses(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    reverse: Boolean = false
  ): MailingAddressConnection!

  # The date and time when the customer was created.
  # createdAt: DateTime!

  # The customer’s default address.
  defaultAddress: MailingAddress

  # The customer’s name, email or phone number.
  displayName: String!

  # The customer’s email address.
  email: String

  # The customer’s first name.
  firstName: String

  # The customer’s last name.
  lastName: String

  # The customer’s phone number.
  phone: String

  # The date and time when the customer information was updated.
  # updatedAt: DateTime!

  # The orders associated with the customer.
  orders(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    reverse: Boolean = false
    #sortKey: OrderSortKeys = ID

    # Supported filter parameters:
    #  - `processed_at`
    query: String
  ): OrderConnection!

  # The carts associated with the customer.
  carts(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int

    reverse: Boolean = false
    #sortKey: CartSortKeys = ID

    # Supported filter parameters:
    #  - `processed_at`
    query: String
  ): CartConnection!


}


type MailingAddressConnection {
  # A list of edges.
  edges: [MailingAddressEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

type MailingAddressEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of MailingAddressEdge.
  node: MailingAddress!
}

# Represents a mailing address for customers and shipping.
type MailingAddress implements Node {
  # Globally unique identifier.
  id: ID!

  # Address line 1 (Street address/PO Box/Company name).
  address1: String

  # Address line 2 (Apartment/Suite/Unit/Building).
  address2: String

  # City/District/Suburb/Town/Village.
  city: String

  # Company/Organization/Government.
  company: String

  # State/County/Province/Region.
  country: String

  # Two-letter country code.
  #
  # For example, US.
  countryCode: String

  # First name of the customer.
  firstName: String
  #formatted(withName: Boolean = false, withCompany: Boolean = true): [String!]!

  # Comma-separated list of city, province, and country.
  formattedArea: String

  # Last name of the customer.
  lastName: String

  # Latitude coordinate of the customer address.
  latitude: Float

  # Longitude coordinate of the customer address.
  longitude: Float

  # Name of the customer, based on first name + last name.
  name: String

  # Unique phone number for the customer.
  #
  # Formatted using E.164 standard. For example, _+16135551111_.
  phone: String

  # State/County/Province/Region.
  province: String

  # Two-letter province or state code.
  #
  # For example, ON.
  provinceCode: String

  # Zip/Postal Code.
  zip: String
}